type UserSkill @model @auth(rules: [{allow: private}]) {
  id: ID!
  userprofileID: ID! @index(name: "byUserProfile")
  Skill: Skill! @hasOne
}

type UserInterest @model @auth(rules: [{allow: private}]) {
  id: ID!
  userprofileID: ID! @index(name: "byUserProfile")
  Interest: Interest! @hasOne
}

type Interest @model @auth(rules: [{allow: private}]) {
  id: ID!
  Name: String!
}

type Skill @model @auth(rules: [{allow: private}]) {
  id: ID!
  Name: String!
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY
}

type Recurrence {
  Frequency: RecurrenceFrequency!
  PeriodCount: Int!
  IsMonday: Boolean!
  IsTuesday: Boolean!
  IsWednesday: Boolean!
  IsThursday: Boolean!
  IsFriday: Boolean!
  IsSaturday: Boolean!
  IsSunday: Boolean!
}

type EventImage @model @auth(rules: [{allow: public}]) {
  id: ID!
  Event: ID! @index(name: "byEvent")
  Image: Image! @hasOne
  IsPrimary: Boolean!
}

type AssetImage @model @auth(rules: [{allow: public}]) {
  id: ID!
  Asset: ID! @index(name: "byAsset")
  Image: Image! @hasOne
  IsPrimary: Boolean!
}

type LocationImage @model @auth(rules: [{allow: public}]) {
  id: ID!
  Image: Image! @hasOne
  Location: ID! @index(name: "byLocation")
  IsPrimary: Boolean!
}

type Image @model @auth(rules: [{allow: public}]) {
  id: ID!
  File: String!
  Caption: String
  Detail: String
}

type Asset @model @auth(rules: [{allow: public}]) {
  id: ID!
  Name: String!
  AssetImages: [AssetImage] @hasMany(indexName: "byAsset", fields: ["id"])
  Description: String
}

type Expense @model @auth(rules: [{allow: public}]) {
  id: ID!
  Name: String!
  Description: String
  Amount: Float
  IncurredDate: AWSDate
  IsRecurring: Boolean!
  Recurrence: Recurrence
}

type Location @model @auth(rules: [{allow: public}]) {
  id: ID!
  Name: String!
  Address: String
  Website: AWSURL
  Phone: AWSPhone
  ContactEmail: AWSEmail
  ContactName: String
  LocationImages: [LocationImage] @hasMany(indexName: "byLocation", fields: ["id"])
}

type Event @model @auth(rules: [{allow: public}]) {
  id: ID!
  Team: ID! @index(name: "byTeam")
  Name: String!
  Date: AWSDate
  Time: AWSTime
  Location: Location @hasOne
  Description: String
  Website: AWSURL
  EventImages: [EventImage] @hasMany(indexName: "byEvent", fields: ["id"])
}

enum ProjectMilestoneStatus {
  ACTIVE
  CLOSED
}

type ProjectMilestone @model @auth(rules: [{allow: public}]) {
  id: ID!
  Project: ID! @index(name: "byProject")
  Name: String!
  Status: ProjectMilestoneStatus!
  Date: AWSDate
}

enum ProjectStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELED
}

type Project @model @auth(rules: [{allow: public}]) {
  id: ID!
  Team: ID! @index(name: "byTeam")
  Name: String!
  Description: String
  Status: ProjectStatus!
  ProjectMilestones: [ProjectMilestone] @hasMany(indexName: "byProject", fields: ["id"])
  StartDate: AWSDate
  EndDate: AWSDate
}

type TaskComment @model @auth(rules: [{allow: public}]) {
  id: ID!
  Task: ID! @index(name: "byTask")
  Comment: String!
  CommentDateTime: AWSDateTime!
  CommentTeamMember: String!
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  ACTIVE
  CLOSED
  ARCHIVED
}

type Task @model @auth(rules: [{allow: public}]) {
  id: ID!
  Team: ID! @index(name: "byTeam")
  Name: String!
  Description: String
  DueDate: AWSDate
  Status: TaskStatus!
  Priority: TaskPriority!
  CompletedByTeamMember: String
  CompletedDate: AWSDate
  Comments: [TaskComment] @hasMany(indexName: "byTask", fields: ["id"])
  StartDate: AWSDate
  Owner: TeamMember @hasOne
  Project: Project @hasOne
  ProjectMilestone: ProjectMilestone @hasOne
}

enum UserProfileVisibility {
  PRIVATE
  PUBLIC
  ARCHIVED
}

enum TeamVisibility {
  PRIVATE
  PUBLIC
  ARCHIVED
}

enum TeamMemberStatus {
  INVITED
  CONFIRMED
  DECLINED
  DEPARTED
}

enum TeamMemberRole {
  ADMINISTRATOR
  MEMBER
}

type TeamMember @model @auth(rules: [{allow: public}]) {
  id: ID!
  Team: ID! @index(name: "byTeam")
  Role: TeamMemberRole!
  Status: TeamMemberStatus!
  InvitedDateTime: AWSDateTime!
  ConfirmedDateTime: AWSDateTime
  DeclinedDateTime: AWSDateTime
  DepartedDateTime: AWSDateTime
  DepartedComment: String
  UserProfile: UserProfile! @hasOne
  InvitedByUser: ID!
}

enum TeamType {
  TEAM
  BAND
  GROUP
}

type Team @model @auth(rules: [{allow: public}]) {
  id: ID!
  Name: String!
  TeamType: TeamType!
  TeamMembers: [TeamMember!] @hasMany(indexName: "byTeam", fields: ["id"])
  Visibility: TeamVisibility!
  Description: String!
  Tasks: [Task] @hasMany(indexName: "byTeam", fields: ["id"])
  Projects: [Project] @hasMany(indexName: "byTeam", fields: ["id"])
  Events: [Event] @hasMany(indexName: "byTeam", fields: ["id"])
}

type UserProfile @model @auth(rules: [{allow: public}]) {
  Visibility: UserProfileVisibility!
  Name: String!
  Tagline: String
  About: String
  Location: String
  id: ID!
  UserId: ID!
  UserInterests: [UserInterest] @hasMany(indexName: "byUserProfile", fields: ["id"])
  UserSkills: [UserSkill] @hasMany(indexName: "byUserProfile", fields: ["id"])
}
 